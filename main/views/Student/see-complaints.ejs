<!DOCTYPE html>
<html lang="en" data-bs-theme="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href='https://unpkg.com/css.gg@2.0.0/icons/css/heart.css' rel='stylesheet'>
    <link rel="stylesheet" href="	https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="/css/landing3.css">
    <title>Imperial Mess</title>
    <style>
        #complaints::after{
            content: '';
            height: 3px;
            width: 100%;
            background: #79bdf2;
            position: absolute;
            left: 0;
            bottom: -10px;
            transition: 0.5s;
        }

        .complaints{
            display: flex;
            flex-direction: column;
           
            align-items: center;
            
            
            flex-grow: 1;
            max-height: 550px;
            overflow-y: auto;
            
        }

        .upvote{
            display: flex;
            gap: 5px;
            align-items: center;
        }

        .upvote-num{
            font-size: 15px;
            padding: 0;
            margin: 0;
        }
        
        .upvote-btn{
            background-color: rgba(48, 82, 85, 0.507);
            padding: 5px 8px 3px 8px;
            font-size: 10px;
            border-radius: 25px;
            margin: 0 0 4px 0;
            
        }

        .card{
            background-color: transparent;
            width: 60%;
            margin-bottom: 10px;
        }

        .card-header{
            font-size: 15px;
        }

        .btn{
            background-color: rgba(48, 82, 85, 0.507);
        }

        .btn:hover{
            background-color: #4d84ad;
        }

        /* .upvote{
            
            font-size: 15px;
        } */

        .date{
            font-size: 15px;
            /* margin-bottom: 4px; */
            color: rgb(175, 175, 175);
        }

        .header{
            display: flex;
            justify-content: space-between;
            margin: 0;
            padding-bottom: 0;
        }

        .status{
            margin: 0;
            text-align: right;
            font-size: 15px;
        }

        

        .read{
            margin-top: 8px;
            margin-bottom: 2px;
            width: 100%;
        }

        .complaints::-webkit-scrollbar {
             width: 10px; /* Set the width of the scrollbar */
        }
    
        .complaints::-webkit-scrollbar-thumb {
            background-color: rgba(121, 190, 242, 0.329); /* Color of the scrollbar thumb */
            border-radius: 3px; /* Rounded corners for the thumb */
        }
    
        .complaints::-webkit-scrollbar-track {
            background-color: transparent; /* Color of the scrollbar track */
        }

        .disable {
          
          background-color: #4d84ad;
          padding: 5px 8px 3px 8px;
            font-size: 10px;
            border-radius: 25px;
            margin: 0 0 4px 0;
        }

    </style>
</head>
<body>

        

        <div class="background">
           

            <%- include('./nav.ejs') %>
        
            <div class="complaints">

                <% complaints.forEach(complaint => { %>

                    <div class="card">
                        <div class="card-header header">
                            <h5 class="date "><%= complaint.registeredAt.toDateString() %></h5>
                            <div class="upvote">
                                <h5 class="upvote-num upvoteCount" ><%= complaint.upvote %>  </h5>
                                <!-- <a class="btn upvote-btn"  >
                                    Up
                                  </a> -->
                                <h5 class="upvote-btn btn upvoteButton" onclick="toggleUpvote(this)"  data-complaint-id="<%= complaint._id %>" >UpVote</h5>  
                            </div>
                            

                        </div>
                        
                        <div class="card-body">
                          <h5 class="card-title"><%= complaint.subject %></h5>
                          
                            

                            <% if (complaint.status === 'Resolved') { %>
                                <p class="card-text status" style="color: rgb(68, 219, 166); font-weight: 600;"><%= complaint.status %></p>
                            <% }else { %>
                                <p class="card-text status" style="color: rgb(186, 80, 80); font-weight: 600;"><%= complaint.status %></p>
                            <% } %>
                             
                          
                          <!-- <a href="#" class="btn">Read more</a> -->
                          <p class="d-inline-flex gap-1 status">
                            <a class="btn" data-bs-toggle="collapse" href="#read<%= complaint._id %>" role="button" aria-expanded="false" aria-controls="collapseExample">
                              Read more
                            </a>
                          </p>
                          <div class="collapse" id="read<%= complaint._id %>">
                            <div class="card card-body read">
                              <%= complaint.description %>
                            </div>
                          </div>
                          <!--ef-->
                        </div>
                    </div>
                 
                <% }) %>

            </div>
            





            
        </div>

    <script src="	https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/js/landing.js"></script>
    <!--experimenting-->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
         
            var upvoteButtons = document.querySelectorAll('.upvoteButton');
    
          // Add click event listener to each upvote button
          Array.from(upvoteButtons).forEach(async function (button) {

             const complaintId = button.getAttribute('data-complaint-id');

             try{
                const response = await fetch(`/upvote/check/${complaintId}`, { method: 'POST' });

                if(response.ok){
                const data = await response.json();

                 if(data.hasUpvoted){
                     button.classList.remove('upvote-btn');
                     button.classList.add('disable');
                 }
                }
             }
             catch(error){
                console.error('Failed to toggle upvote', error);
             }
             
            

            //button.addEventListener('click', function () {
                // event.stopPropagation(); 
           //     toggleUpvote(button);
            //});

         });
        });

    
        // async function upvoteComplaint(button) {
        //   const complaintId = button.getAttribute('data-complaint-id');
        //   const response = await fetch(`/upvote/${complaintId}`, { method: 'POST' });
    
        //   if (response.ok) {
        //     const data = await response.json();
        //     // Update the upvote count for the specific complaint
        //     var upvoteCountElement = button.parentElement.querySelector('.upvoteCount');
        //     upvoteCountElement.innerText = data.upvotes;
            
        //     button.classList.remove('upvote-btn');
        //     button.classList.add('disable');

            
        //   } else {
        //     console.log('Failed to upvote the complaint');
        //   }
        // }




        async function toggleUpvote(button) {
          
            const complaintId = button.getAttribute('data-complaint-id');
    
          try {
            const response = await fetch(`/toggleUpvote/${complaintId}`, { method: 'POST' });
    
            if (response.ok) {
              const data = await response.json();
              
              var upvoteCountElement = button.parentElement.querySelector('.upvoteCount');
              upvoteCountElement.innerText = data.upvoteCount;
    
              // Update the button text based on the upvote status
            //   button.innerText = data.isUpvoted ? 'Undo Upvote' : 'Upvote';
    
                if(data.isUpvoted===true){
                    button.classList.remove('upvote-btn');
                    button.classList.add('disable');
                } else{
                    button.classList.remove('disable');
                    button.classList.add('upvote-btn');
                } 


            } else {
              const data = await response.json();
              // Handle error message
              console.error(data.message);
            }
          } catch (error) {
            console.error('Failed to toggle upvote', error);
          }
        }
      </script>
</body>
</html>